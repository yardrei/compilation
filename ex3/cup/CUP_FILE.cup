/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;
import exceptions.*;

parser code 
{:
	public Lexer lexer;
	private int currLine;
	public int errorCode;
	public int syntaxErrorLine = -1;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		// System.out.print("ERROR >> ");		
		// System.out.print("[");
		// System.out.print(lexer.getLine());
		// System.out.print(":");
		// System.out.print(lexer.getCharPos());
		// System.out.print("] ");	
		throw new SyntacticException(lexer.getLine() - 1, "Syntax Error");
		// syntaxErrorLine = lexer.getLine();	
		// errorCode = 1;
		// throw new Exception("Syntax error");
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	currLine = lexer.getLine();
    s = lexer.next_token();
    if(s.sym == TokenNames.error) {
        throw new LexicalException(lexer.getLine() - 1, "Lexer Error");
    }
//	System.out.print(s.sym);
	System.out.print(TokenNames.terminalNames[s.sym]);
    System.out.print("[");
    System.out.print(lexer.getLine());
    System.out.print(":");
    System.out.print(lexer.getCharPos());
    System.out.print("] ");

    // System.out.print(String.format("[%d:%d] %s",
    //     lexer.getLine(), lexer.getCharPos(), TokenNames.terminalNames[s.sym]));

	// if (s.value != null)
	// {
    //     System.out.print(String.format("( %s )", s.value));
	// }
	// System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal int PLUS;
terminal int MINUS;
terminal int TIMES;
terminal int DIVIDE;
terminal int LPAREN;
terminal int RPAREN;
terminal int LBRACK;
terminal int RBRACK;
terminal int LBRACE;
terminal int RBRACE;
terminal int NIL;
terminal int COMMA;
terminal int DOT;
terminal int SEMICOLON;
terminal int ASSIGN;
terminal int EQ;
terminal int LT;
terminal int GT;
terminal int ARRAY;
terminal int CLASS;
terminal int EXTENDS;
terminal int RETURN;
terminal int WHILE;
terminal int IF;
terminal int NEW;
terminal int TYPE_VOID;
terminal int TYPE_INT;
terminal int TYPE_STRING;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_PROG program;
non terminal AST_DEC dec;
non terminal AST_TYPE type;
non terminal AST_C_FIELD cField;
non terminal AST_LIST<AST_C_FIELD> cFieldList;
non terminal AST_EXP exp;
non terminal AST_NEW_EXP newExp;
non terminal AST_LIST<AST_EXP> expList;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_LIST<AST_STMT> stmtList;
non terminal AST_LIST<AST_DEC> decList;
non terminal AST_FUNC_PARAM funcParam;
non terminal AST_LIST<AST_FUNC_PARAM> funcParamList;
non terminal AST_VAR_DEC varDec;
non terminal AST_FUNC_DEC funcDec;
non terminal AST_CLASS_DEC classDec;
non terminal AST_ARRAY_TYPE_DEF arrayTypeDef;
non terminal AST_BINOP_OP binop;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc ASSIGN;
precedence left EQ;
precedence left GT, LT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc LBRACK;
precedence nonassoc LPAREN;
precedence left DOT;

/************************/
/* START WITH: stmtList */
/************************/
start with program;

/********************/
/* DERIVATION RULES */
/********************/

program		::=		decList:dl			    {: RESULT = new AST_PROG(dl, dlleft);   :}
					;

decList    ::=     dec:d decList:dl         {: RESULT = new AST_LIST<AST_DEC>(d, dl, dleft);   :}
                    | dec:d                 {: RESULT = new AST_LIST<AST_DEC>(d, null, dleft); :}
                    ;

dec			::=		varDec:d					{: RESULT = new AST_DEC_GEN<AST_VAR_DEC>(d, dleft);	   		:}
					| funcDec:d				    {: RESULT = new AST_DEC_GEN<AST_FUNC_DEC>(d, dleft);		:}
					| classDec:d				{: RESULT = new AST_DEC_GEN<AST_CLASS_DEC>(d, dleft);		:}
					| arrayTypeDef:d			{: RESULT = new AST_DEC_GEN<AST_ARRAY_TYPE_DEF>(d, dleft);	:}
					;

type		::=		TYPE_INT							{: RESULT = new AST_TYPE_GEN(0, currLine);			:}
					| TYPE_STRING						{: RESULT = new AST_TYPE_GEN(1, currLine);			:}
					| TYPE_VOID							{: RESULT = new AST_TYPE_GEN(2, currLine);		:}
					| ID:id								{: RESULT = new AST_TYPE_ID(id, idleft);	:}
					;

arrayTypeDef	::=	ARRAY ID:id EQ type:t LBRACK RBRACK SEMICOLON {: RESULT = new AST_ARRAY_TYPE_DEF(id, t, idleft); :}
					;

varDec		::=		type:t ID:id SEMICOLON						{: RESULT = new AST_VAR_DEC(t, id, null, tleft);	:}
					|type:t ID:id ASSIGN exp:e SEMICOLON			{: RESULT = new AST_VAR_DEC(t, id, e, tleft);	:}
					|type:t ID:id ASSIGN newExp:e SEMICOLON		{: RESULT = new AST_VAR_DEC(t, id, e, tleft);	    :}
					;

funcDec	::=		    type:t ID:id LPAREN RPAREN LBRACE stmtList:sl RBRACE					{: RESULT = new AST_FUNC_DEC(t, id, null, sl, tleft);	:}
					| type:t ID:id LPAREN funcParamList:pl RPAREN LBRACE stmtList:sl RBRACE	{: RESULT = new AST_FUNC_DEC(t, id, pl, sl, tleft);		:}
					;

funcParamList ::=   funcParam: p COMMA funcParamList:l	    {: RESULT = new AST_LIST<AST_FUNC_PARAM>(p, l, pleft); 		:}
					| funcParam: p							{: RESULT = new AST_LIST<AST_FUNC_PARAM>(p, null, pleft);	:}
					;

funcParam	::=		type:t ID:id						{: RESULT = new AST_FUNC_PARAM(t, id, tleft);	:}
					| COMMA type:t ID:id				{: RESULT = new AST_FUNC_PARAM(t, id, tleft);	:}
					;

stmtList	::=		stmt:l stmtList:r						{: RESULT = new AST_LIST<AST_STMT>(l, r, lleft);	:}
					| stmt:l							    {: RESULT = new AST_LIST<AST_STMT>(l, null, lleft);	:}
					;


classDec	::=		CLASS ID:id1 EXTENDS ID:id2 LBRACE cFieldList:cfl RBRACE	{: RESULT = new AST_CLASS_DEC(id1, id2, cfl, id1left); :}
					| CLASS ID:id LBRACE cFieldList:cfl RBRACE					{: RESULT = new AST_CLASS_DEC(id, null, cfl, idleft); :}
					;

cFieldList::=		cField:p cFieldList:l			    {: RESULT = new AST_LIST<AST_C_FIELD>(p, l, pleft);		:}
					| cField:p 							{: RESULT = new AST_LIST<AST_C_FIELD>(p, null, pleft);	:}
					;

exp			::=		var:v											{: RESULT = new AST_EXP_VAR(v, vleft);      			:}
					| LPAREN exp:e RPAREN							{: RESULT = new AST_EXP_EXP(e, eleft);					:}
					| exp:e1 binop:b exp:e2							{: RESULT = new AST_EXP_BINOP(e1, e2, b, e1left);		:}
					| ID:d LPAREN RPAREN							{: RESULT = new AST_EXP_FUNC_VAR(null, d, null, dleft);	:}
					| ID:d LPAREN expList:el RPAREN				    {: RESULT = new AST_EXP_FUNC_VAR(null, d, el, dleft);	:}
					| var:v DOT ID:d LPAREN RPAREN					{: RESULT = new AST_EXP_FUNC_VAR(v, d, null, dleft);	:}
					| var:v DOT ID:d LPAREN expList:el RPAREN		{: RESULT = new AST_EXP_FUNC_VAR(v, d, el, dleft);		:}
					| INT:i											{: RESULT = new AST_EXP_INT(i, ileft);        			:}
					| MINUS INT:i									{: RESULT = new AST_EXP_INT(-i, ileft);       			:}
                    | NIL					 					    {: RESULT = new AST_EXP_NIL(currLine);          	:}
					| STRING:s										{: RESULT = new AST_EXP_STRING(s, sleft);        		:}
					;

expList	::=		    exp:e COMMA expList:el				{: RESULT = new AST_LIST<AST_EXP>(e, el, eleft);	:}
					| exp:e								{: RESULT = new AST_LIST<AST_EXP>(e, null, eleft);	:}
					;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name, nameleft);		:}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName, vleft);	:}
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v, e, vleft);     :}
					;

stmt		::=		varDec:vd													{: RESULT = new AST_STMT_VAR_DEC(vd, vdleft);			    :}
					| var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v, e, vleft);		    	:}
					| var:v ASSIGN newExp:e SEMICOLON							{: RESULT = new AST_STMT_ASSIGN(v, e, vleft);		        :}
					| RETURN SEMICOLON								    		{: RESULT = new AST_STMT_RET(null, currLine - 1);  	:}
					| RETURN exp:e SEMICOLON						    		{: RESULT = new AST_STMT_RET(e, eleft); 		:}
					| IF LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE 	{: RESULT = new AST_STMT_IF(cond,body, condleft); 	    	:}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body, condleft);		:}
					| ID:d LPAREN RPAREN SEMICOLON                              {: RESULT = new AST_STMT_FUNC_VAR(d, null, null, dleft);	:}
					| ID:d LPAREN expList:el RPAREN SEMICOLON					{: RESULT = new AST_STMT_FUNC_VAR(d, null, el, dleft);    	:}
                    | var:v DOT ID:d LPAREN RPAREN SEMICOLON	            	{: RESULT = new AST_STMT_FUNC_VAR(d, v, null, vleft);	    :}
					| var:v DOT ID:d LPAREN expList:el RPAREN SEMICOLON		    {: RESULT = new AST_STMT_FUNC_VAR(d, v, el, vleft);			:}
					;

newExp		::=	    NEW type:t                              {: RESULT = new AST_NEW_EXP(t, null, tleft); 	:}
                    | NEW type:t LBRACK exp:e RBRACK        {: RESULT = new AST_NEW_EXP(t, e, tleft);		:}
                    ;

cField		::=		varDec:vd		{: RESULT = new AST_C_FIELD_VAR(vd, vdleft);	:}
					| funcDec:fd	{: RESULT = new AST_C_FIELD_FUNC(fd, fdleft);	:}
					;


binop 		::=		PLUS		{: RESULT = new AST_BINOP_OP(0);	:}
					| MINUS 	{: RESULT = new AST_BINOP_OP(1);	:}
					| TIMES 	{: RESULT = new AST_BINOP_OP(2);	:}
					| DIVIDE 	{: RESULT = new AST_BINOP_OP(3);	:}
					| LT 		{: RESULT = new AST_BINOP_OP(4);	:}
					| GT		{: RESULT = new AST_BINOP_OP(5);	:}
					| EQ		{: RESULT = new AST_BINOP_OP(6);	:}
					;